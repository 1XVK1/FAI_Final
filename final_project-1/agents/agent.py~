import random
from game.players import BasePokerPlayer
from agents.MCS import monte_carlo_win_rate
from agents.PreflopDecisionEngine import PreflopDecisionEngine
from agents.BluffDecisionEngine import BluffDecisionEngine
from agents.PostflopDecisionEngine import PostflopDecisionEngine
from agents.detect_patterns import evaluate_hand_pattern
from game.engine.card import Card


class GTOAgent(BasePokerPlayer):
    def __init__(self):
        self.preflop_engine = PreflopDecisionEngine()
        self.bluff_engine = BluffDecisionEngine(alpha=2.0)
        self.postflop_engine = PostflopDecisionEngine(raise_threshold=0.65, fold_threshold=0.3)
        self.has_triggered_fold = False
        self.is_bb = False
        self.updated = False
        self.fold_win_threshold = 1150
        self.previous_stack = 1000
        self.opponent_stack = 1000
        self.last_preflop_bucket = None
        self.opponent_stats = {
            "your_raises": 0,
            "opponent_calls": 0,
            "opponent_call_rate": 0.0
        }
        self.round_stats = {"round_num": 0, "raise_count": 0, "fold_count": 0, "call_count": 0}

    def declare_action(self, valid_actions, hole_card, round_state):
        if self.has_triggered_fold:
            return "fold", 0

        seats = round_state["seats"]
        for i, seat in enumerate(seats):
            if seat["uuid"] == self.uuid:
                self_pos = i
                current_stack = seat["stack"]
            else:
                self.opponent_stack = seat["stack"]

        community_card = round_state.get("community_card", [])
        raise_act_min = valid_actions[2]["amount"]["min"]
        raise_act_max = valid_actions[2]["amount"]["max"]
        sb_pos = round_state["small_blind_pos"]
        bb_pos = round_state["big_blind_pos"]
        sb_value = round_state.get("small_blind_amount", 10)
        bb_value = 2 * sb_value
        self.is_bb = (self_pos == bb_pos)

        if not self.updated:
            self.updated = True
            self.fold_win_threshold -= bb_value if self.is_bb else sb_value

        if current_stack > self.fold_win_threshold:
            self.has_triggered_fold = True
            return "fold", 0

        street = round_state["street"].lower()

        if street == "preflop":
            action, amount, bucket = self.preflop_engine.decide(valid_actions, hole_card)
            self.last_preflop_bucket = bucket
            print(f"Preflop win rate for {hole_card}: {amount/valid_actions[2]['amount']['max']:.2f}")
            return action, amount

        def to_card(c):
            return c if isinstance(c, Card) else Card.from_str(c)

        hole_card = [to_card(c) for c in hole_card]
        community_card = [to_card(c) for c in community_card]

        win_rate = monte_carlo_win_rate(hole_card, community_card)
        print(f"Postflop win_rate for {hole_card} + {community_card}: {win_rate:.4f}")

        pattern = evaluate_hand_pattern(hole_card, community_card)
        pattern_boost = 0.0
        if pattern.get("flush_draw"):
            pattern_boost += 0.05
        if pattern.get("open_ended"):
            pattern_boost += 0.04
        elif pattern.get("gutshot"):
            pattern_boost += 0.02

        adjusted_win_rate = win_rate + pattern_boost
        print(f"Adjusted win_rate after pattern boost: {adjusted_win_rate:.4f}")

        if self.bluff_engine.decide_bluff(adjusted_win_rate):
            raise_amount = max(int(raise_act_min + (adjusted_win_rate)**4 * (raise_act_max - raise_act_min)), 3 * raise_act_min)
            self.round_stats["raise_count"] += 1
            self.opponent_stats["your_raises"] += 1
            return "raise", raise_amount

        if win_rate < self.postflop_engine.fold_threshold:
            self.round_stats["fold_count"] += 1
            return "fold", 0
        elif win_rate > self.postflop_engine.raise_threshold:
            raise_amount = int(raise_act_min + win_rate * (raise_act_max - raise_act_min))
            self.round_stats["raise_count"] += 1
            self.opponent_stats["your_raises"] += 1
            return "raise", raise_amount
        else:
            self.round_stats["call_count"] += 1
            self.opponent_stats["opponent_calls"] += 1
            return "call", valid_actions[1]["amount"]

    def receive_game_start_message(self, game_info):
        self.previous_stack = game_info["rule"].get("initial_stack", 1000)
        self.updated = False
        self.has_triggered_fold = False

    def receive_round_start_message(self, round_count, hole_card, seats):
        self.updated = False

    def receive_street_start_message(self, street, round_state):
        pass

    def receive_game_update_message(self, action, round_state):
        pass

    def receive_round_result_message(self, winners, hand_info, round_state):
        win = any(self.uuid == p["uuid"] for p in winners)
        if self.last_preflop_bucket:
            self.preflop_engine.update_thresholds(win, self.last_preflop_bucket)
            self.last_preflop_bucket = None

        self.postflop_engine.adjust_thresholds(round_state, win, self.round_stats)

        if self.opponent_stats["your_raises"] > 0:
            raw_rate = self.opponent_stats["opponent_calls"] / self.opponent_stats["your_raises"]
            self.opponent_stats["opponent_call_rate"] = 0.9 * self.opponent_stats["opponent_call_rate"] + 0.1 * raw_rate

        min_alpha = 1.3
        max_alpha = 3.5
        call_rate = self.opponent_stats["opponent_call_rate"]
        self.bluff_engine.alpha = min_alpha + (max_alpha - min_alpha) * call_rate
        self.round_stats["round_num"] += 1


def setup_ai():
    return GTOAgent()

