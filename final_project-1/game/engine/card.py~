import random
from typing import List
from game.engine.hand_evaluator import HandEvaluator
from game.engine.card import Card


def generate_full_deck() -> List[Card]:
    suits = [Card.CLUB, Card.DIAMOND, Card.HEART, Card.SPADE]
    ranks = list(range(2, 15))
    return [Card(suit, rank) for suit in suits for rank in ranks]


def monte_carlo_win_rate(
    my_hole: List[Card], community: List[Card], iterations=10000
) -> float:
    known_cards = my_hole + community
    deck = [card for card in generate_full_deck() if card not in known_cards]

    wins, ties, losses = 0, 0, 0

    for _ in range(iterations):
        random.shuffle(deck)
        opp_hole = deck[:2]

        remaining = 5 - len(community)
        community_fill = deck[2 : 2 + remaining]
        full_community = community + community_fill

        my_score = HandEvaluator.eval_hand(my_hole, full_community)
        opp_score = HandEvaluator.eval_hand(opp_hole, full_community)

        if my_score > opp_score:
            wins += 1
        elif my_score == opp_score:
            ties += 1
        else:
            losses += 1

    total = wins + ties + losses
    return (wins + 0.5 * ties) / total if total > 0 else 0.0


def river_WR_test(hole_card: List[Card], community_card: List[Card]) -> float:
    my_score = HandEvaluator.eval_hand(hole_card, community_card)
    total = 0
    win = 0
    full_deck = [Card(suit, rank) for suit in [2, 4, 8, 16] for rank in range(2, 15)]
    unknown = [c for c in full_deck if c not in hole_card and c not in community_card]
    for i in range(len(unknown)):
        for j in range(i + 1, len(unknown)):
            opp_score = HandEvaluator.eval_hand(
                [unknown[i], unknown[j]], community_card
            )
            if my_score > opp_score:
                win += 1
            elif my_score == opp_score:
                win += 0.5
            total += 1
    return win / total if total > 0 else 0.0


def Starting_Hand_WR(hole_card: List[Card]) -> float:
    # Ensure valid 2-card input
    if len(hole_card) != 2:
        return 0.0

    c1, c2 = hole_card

    # Optional conversion if rank is int
    def rank_str(card):
        return (
            Card.int_to_rank(card.rank)
            if isinstance(card.rank, int)
            else card.rank.upper()
        )

    # Sort cards by rank
    if rank_str(c1) > rank_str(c2):
        high, low = c1, c2
    else:
        high, low = c2, c1

    # Construct key
    suited = high.suit == low.suit
    high_rank = rank_str(high)
    low_rank = rank_str(low)

    if high_rank == low_rank:
        key = high_rank + low_rank  # e.g., 'AA'
    else:
        key = f"{high_rank}{low_rank}" + ("s" if suited else "o")

    # Lookup table (unchanged)
    win_rate_vs_1_opponent = {
        "AA": 84.9,
        "KK": 82.1,
        "QQ": 79.6,
        "JJ": 77.1,
        "TT": 74.7,
        "99": 71.7,
        "88": 68.7,
        "77": 65.7,
        "66": 62.7,
        "55": 59.6,
        "44": 56.3,
        "33": 52.9,
        "22": 49.3,
        "AKs": 66.2,
        "AKo": 64.5,
        "AQ": 64.0,
        "AJ": 63.0,
        "AT": 62.0,
        "A9": 60.0,
        "A8": 58.9,
        "A7": 57.7,
        "A6": 56.4,
        "A5": 56.3,
        "A4": 55.3,
        "A3": 54.5,
        "A2": 53.6,
        "KQs": 62.4,
        "KQo": 60.5,
        "KJ": 59.9,
        "KT": 59.0,
        "K9": 57.0,
        "K8": 55.0,
        "K7": 54.0,
        "K6": 52.9,
        "K5": 51.9,
        "K4": 50.9,
        "K3": 50.0,
        "K2": 49.1,
        "QJs": 59.1,
        "QJo": 57.0,
        "QT": 56.5,
        "Q9": 54.5,
        "Q8": 52.6,
        "Q7": 50.5,
        "Q6": 49.7,
        "Q5": 48.6,
        "Q4": 47.7,
        "Q3": 46.8,
        "Q2": 45.9,
        "JTs": 56.2,
        "JTo": 53.8,
        "J9": 52.3,
        "J8": 50.4,
        "J7": 48.4,
        "J6": 46.4,
        "J5": 45.6,
        "J4": 44.6,
        "J3": 43.8,
        "J2": 42.8,
        "T9s": 52.4,
        "T9o": 49.8,
        "T8": 48.5,
        "T7": 46.5,
        "T6": 44.6,
        "T5": 42.6,
        "T4": 41.8,
        "T3": 40.9,
        "T2": 40.1,
        "98s": 48.9,
        "98o": 46.1,
        "97": 44.8,
        "96": 42.9,
        "95": 40.9,
        "94": 38.9,
        "93": 38.3,
        "92": 37.4,
        "87s": 45.7,
        "87o": 42.7,
        "86": 41.5,
        "85": 39.6,
        "84": 37.5,
        "83": 35.6,
        "82": 35.0,
        "76s": 42.9,
        "76o": 39.7,
        "75": 38.5,
        "74": 36.5,
        "73": 34.6,
        "72": 32.6,
        "72o": 31.7,
        "65s": 40.3,
        "65o": 37.0,
        "64": 35.9,
        "63": 34.0,
        "62": 32.0,
        "54s": 38.5,
        "54o": 35.1,
        "53": 34.0,
        "52": 32.1,
        "43s": 35.7,
        "43o": 32.1,
        "42": 31.1,
        "32s": 33.1,
        "32o": 29.3,
    }

    print(f"Starting Hand Win Rate for {key}: {win_rate_vs_1_opponent.get(key, 0.0)}%")

    return win_rate_vs_1_opponent.get(key, 0.0) / 100

